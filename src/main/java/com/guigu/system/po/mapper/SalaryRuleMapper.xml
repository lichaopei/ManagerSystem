<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.guigu.system.po.mapper.SalaryRuleMapper" >
  <resultMap id="BaseResultMap" type="com.guigu.system.po.SalaryRule" >
    <id column="Salary_ID" property="salaryId" jdbcType="INTEGER" />
    <result column="Position_ID" property="positionId" jdbcType="INTEGER" />
    <result column="Base_Salary" property="baseSalary" jdbcType="DOUBLE" />
    <result column="Position_Salary" property="positionSalary" jdbcType="DOUBLE" />
    <result column="Target_Money" property="targetMoney" jdbcType="DOUBLE" />
    <result column="Up_Percent" property="upPercent" jdbcType="DOUBLE" />
    <result column="Jx_Percent" property="jxPercent" jdbcType="DOUBLE" />
    <result column="Score_money" property="scoreMoney" jdbcType="DOUBLE" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Salary_ID, Position_ID, Base_Salary, Position_Salary, Target_Money, Up_Percent, Jx_Percent, 
    Score_money
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.guigu.system.po.SalaryRuleExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from salary_rule
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from salary_rule
    where Salary_ID = #{salaryId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from salary_rule
    where Salary_ID = #{salaryId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guigu.system.po.SalaryRuleExample" >
    delete from salary_rule
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guigu.system.po.SalaryRule" >
    insert into salary_rule (Salary_ID, Position_ID, Base_Salary, 
      Position_Salary, Target_Money, Up_Percent, 
      Jx_Percent, Score_money)
    values (#{salaryId,jdbcType=INTEGER}, #{positionId,jdbcType=INTEGER}, #{baseSalary,jdbcType=DOUBLE}, 
      #{positionSalary,jdbcType=DOUBLE}, #{targetMoney,jdbcType=DOUBLE}, #{upPercent,jdbcType=DOUBLE}, 
      #{jxPercent,jdbcType=DOUBLE}, #{scoreMoney,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.guigu.system.po.SalaryRule" >
    insert into salary_rule
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="salaryId != null" >
        Salary_ID,
      </if>
      <if test="positionId != null" >
        Position_ID,
      </if>
      <if test="baseSalary != null" >
        Base_Salary,
      </if>
      <if test="positionSalary != null" >
        Position_Salary,
      </if>
      <if test="targetMoney != null" >
        Target_Money,
      </if>
      <if test="upPercent != null" >
        Up_Percent,
      </if>
      <if test="jxPercent != null" >
        Jx_Percent,
      </if>
      <if test="scoreMoney != null" >
        Score_money,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="salaryId != null" >
        #{salaryId,jdbcType=INTEGER},
      </if>
      <if test="positionId != null" >
        #{positionId,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null" >
        #{baseSalary,jdbcType=DOUBLE},
      </if>
      <if test="positionSalary != null" >
        #{positionSalary,jdbcType=DOUBLE},
      </if>
      <if test="targetMoney != null" >
        #{targetMoney,jdbcType=DOUBLE},
      </if>
      <if test="upPercent != null" >
        #{upPercent,jdbcType=DOUBLE},
      </if>
      <if test="jxPercent != null" >
        #{jxPercent,jdbcType=DOUBLE},
      </if>
      <if test="scoreMoney != null" >
        #{scoreMoney,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.guigu.system.po.SalaryRuleExample" resultType="java.lang.Integer" >
    select count(*) from salary_rule
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update salary_rule
    <set >
      <if test="record.salaryId != null" >
        Salary_ID = #{record.salaryId,jdbcType=INTEGER},
      </if>
      <if test="record.positionId != null" >
        Position_ID = #{record.positionId,jdbcType=INTEGER},
      </if>
      <if test="record.baseSalary != null" >
        Base_Salary = #{record.baseSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.positionSalary != null" >
        Position_Salary = #{record.positionSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.targetMoney != null" >
        Target_Money = #{record.targetMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.upPercent != null" >
        Up_Percent = #{record.upPercent,jdbcType=DOUBLE},
      </if>
      <if test="record.jxPercent != null" >
        Jx_Percent = #{record.jxPercent,jdbcType=DOUBLE},
      </if>
      <if test="record.scoreMoney != null" >
        Score_money = #{record.scoreMoney,jdbcType=DOUBLE},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update salary_rule
    set Salary_ID = #{record.salaryId,jdbcType=INTEGER},
      Position_ID = #{record.positionId,jdbcType=INTEGER},
      Base_Salary = #{record.baseSalary,jdbcType=DOUBLE},
      Position_Salary = #{record.positionSalary,jdbcType=DOUBLE},
      Target_Money = #{record.targetMoney,jdbcType=DOUBLE},
      Up_Percent = #{record.upPercent,jdbcType=DOUBLE},
      Jx_Percent = #{record.jxPercent,jdbcType=DOUBLE},
      Score_money = #{record.scoreMoney,jdbcType=DOUBLE}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.guigu.system.po.SalaryRule" >
    update salary_rule
    <set >
      <if test="positionId != null" >
        Position_ID = #{positionId,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null" >
        Base_Salary = #{baseSalary,jdbcType=DOUBLE},
      </if>
      <if test="positionSalary != null" >
        Position_Salary = #{positionSalary,jdbcType=DOUBLE},
      </if>
      <if test="targetMoney != null" >
        Target_Money = #{targetMoney,jdbcType=DOUBLE},
      </if>
      <if test="upPercent != null" >
        Up_Percent = #{upPercent,jdbcType=DOUBLE},
      </if>
      <if test="jxPercent != null" >
        Jx_Percent = #{jxPercent,jdbcType=DOUBLE},
      </if>
      <if test="scoreMoney != null" >
        Score_money = #{scoreMoney,jdbcType=DOUBLE},
      </if>
    </set>
    where Salary_ID = #{salaryId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guigu.system.po.SalaryRule" >
    update salary_rule
    set Position_ID = #{positionId,jdbcType=INTEGER},
      Base_Salary = #{baseSalary,jdbcType=DOUBLE},
      Position_Salary = #{positionSalary,jdbcType=DOUBLE},
      Target_Money = #{targetMoney,jdbcType=DOUBLE},
      Up_Percent = #{upPercent,jdbcType=DOUBLE},
      Jx_Percent = #{jxPercent,jdbcType=DOUBLE},
      Score_money = #{scoreMoney,jdbcType=DOUBLE}
    where Salary_ID = #{salaryId,jdbcType=INTEGER}
  </update>
</mapper>