<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.guigu.system.po.mapper.EmpTestMapper" >
  <resultMap id="BaseResultMap" type="com.guigu.system.po.EmpTest" >
    <id column="Test_Id" property="testId" jdbcType="INTEGER" />
    <result column="Emp_ID" property="empId" jdbcType="INTEGER" />
    <result column="Base_Salary" property="baseSalary" jdbcType="DOUBLE" />
    <result column="Position_Salary" property="positionSalary" jdbcType="DOUBLE" />
    <result column="Up_Salary" property="upSalary" jdbcType="DOUBLE" />
    <result column="JX_Salary" property="jxSalary" jdbcType="DOUBLE" />
    <result column="All_Salary" property="allSalary" jdbcType="DOUBLE" />
    <result column="Test_Score" property="testScore" jdbcType="DOUBLE" />
    <result column="Test_Date" property="testDate" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    Test_Id, Emp_ID, Base_Salary, Position_Salary, Up_Salary, JX_Salary, All_Salary, 
    Test_Score, Test_Date
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.guigu.system.po.EmpTestExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from emp_test
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from emp_test
    where Test_Id = #{testId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from emp_test
    where Test_Id = #{testId,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.guigu.system.po.EmpTestExample" >
    delete from emp_test
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.guigu.system.po.EmpTest" >
    insert into emp_test (Test_Id, Emp_ID, Base_Salary, 
      Position_Salary, Up_Salary, JX_Salary, 
      All_Salary, Test_Score, Test_Date
      )
    values (#{testId,jdbcType=INTEGER}, #{empId,jdbcType=INTEGER}, #{baseSalary,jdbcType=DOUBLE}, 
      #{positionSalary,jdbcType=DOUBLE}, #{upSalary,jdbcType=DOUBLE}, #{jxSalary,jdbcType=DOUBLE}, 
      #{allSalary,jdbcType=DOUBLE}, #{testScore,jdbcType=DOUBLE}, #{testDate,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.guigu.system.po.EmpTest" >
    insert into emp_test
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="testId != null" >
        Test_Id,
      </if>
      <if test="empId != null" >
        Emp_ID,
      </if>
      <if test="baseSalary != null" >
        Base_Salary,
      </if>
      <if test="positionSalary != null" >
        Position_Salary,
      </if>
      <if test="upSalary != null" >
        Up_Salary,
      </if>
      <if test="jxSalary != null" >
        JX_Salary,
      </if>
      <if test="allSalary != null" >
        All_Salary,
      </if>
      <if test="testScore != null" >
        Test_Score,
      </if>
      <if test="testDate != null" >
        Test_Date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="testId != null" >
        #{testId,jdbcType=INTEGER},
      </if>
      <if test="empId != null" >
        #{empId,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null" >
        #{baseSalary,jdbcType=DOUBLE},
      </if>
      <if test="positionSalary != null" >
        #{positionSalary,jdbcType=DOUBLE},
      </if>
      <if test="upSalary != null" >
        #{upSalary,jdbcType=DOUBLE},
      </if>
      <if test="jxSalary != null" >
        #{jxSalary,jdbcType=DOUBLE},
      </if>
      <if test="allSalary != null" >
        #{allSalary,jdbcType=DOUBLE},
      </if>
      <if test="testScore != null" >
        #{testScore,jdbcType=DOUBLE},
      </if>
      <if test="testDate != null" >
        #{testDate,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.guigu.system.po.EmpTestExample" resultType="java.lang.Integer" >
    select count(*) from emp_test
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update emp_test
    <set >
      <if test="record.testId != null" >
        Test_Id = #{record.testId,jdbcType=INTEGER},
      </if>
      <if test="record.empId != null" >
        Emp_ID = #{record.empId,jdbcType=INTEGER},
      </if>
      <if test="record.baseSalary != null" >
        Base_Salary = #{record.baseSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.positionSalary != null" >
        Position_Salary = #{record.positionSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.upSalary != null" >
        Up_Salary = #{record.upSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.jxSalary != null" >
        JX_Salary = #{record.jxSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.allSalary != null" >
        All_Salary = #{record.allSalary,jdbcType=DOUBLE},
      </if>
      <if test="record.testScore != null" >
        Test_Score = #{record.testScore,jdbcType=DOUBLE},
      </if>
      <if test="record.testDate != null" >
        Test_Date = #{record.testDate,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update emp_test
    set Test_Id = #{record.testId,jdbcType=INTEGER},
      Emp_ID = #{record.empId,jdbcType=INTEGER},
      Base_Salary = #{record.baseSalary,jdbcType=DOUBLE},
      Position_Salary = #{record.positionSalary,jdbcType=DOUBLE},
      Up_Salary = #{record.upSalary,jdbcType=DOUBLE},
      JX_Salary = #{record.jxSalary,jdbcType=DOUBLE},
      All_Salary = #{record.allSalary,jdbcType=DOUBLE},
      Test_Score = #{record.testScore,jdbcType=DOUBLE},
      Test_Date = #{record.testDate,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.guigu.system.po.EmpTest" >
    update emp_test
    <set >
      <if test="empId != null" >
        Emp_ID = #{empId,jdbcType=INTEGER},
      </if>
      <if test="baseSalary != null" >
        Base_Salary = #{baseSalary,jdbcType=DOUBLE},
      </if>
      <if test="positionSalary != null" >
        Position_Salary = #{positionSalary,jdbcType=DOUBLE},
      </if>
      <if test="upSalary != null" >
        Up_Salary = #{upSalary,jdbcType=DOUBLE},
      </if>
      <if test="jxSalary != null" >
        JX_Salary = #{jxSalary,jdbcType=DOUBLE},
      </if>
      <if test="allSalary != null" >
        All_Salary = #{allSalary,jdbcType=DOUBLE},
      </if>
      <if test="testScore != null" >
        Test_Score = #{testScore,jdbcType=DOUBLE},
      </if>
      <if test="testDate != null" >
        Test_Date = #{testDate,jdbcType=VARCHAR},
      </if>
    </set>
    where Test_Id = #{testId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.guigu.system.po.EmpTest" >
    update emp_test
    set Emp_ID = #{empId,jdbcType=INTEGER},
      Base_Salary = #{baseSalary,jdbcType=DOUBLE},
      Position_Salary = #{positionSalary,jdbcType=DOUBLE},
      Up_Salary = #{upSalary,jdbcType=DOUBLE},
      JX_Salary = #{jxSalary,jdbcType=DOUBLE},
      All_Salary = #{allSalary,jdbcType=DOUBLE},
      Test_Score = #{testScore,jdbcType=DOUBLE},
      Test_Date = #{testDate,jdbcType=VARCHAR}
    where Test_Id = #{testId,jdbcType=INTEGER}
  </update>
</mapper>